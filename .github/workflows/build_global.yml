name: Build Global

permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_dispatch:
    inputs:
      build_kernel_op8_oos131_a13:
        description: 'Build Kernel OnePlus 8 (OOS13.1)?'
        required: true
        type: boolean
        default: true
      build_kernel_k20p_aosp_a15:
        description: 'Build Kernel Redmi K20Pro (Soviet-Star-OSS)(Based-AOSP A15)?'
        required: true
        type: boolean
        default: true
      build_kernel_mix2s_evox_a15:
        description: 'Build Kernel Xiaomi Mix2s (EVOX-A15-Official)?'
        required: true
        type: boolean
        default: true

jobs:
  build_kernel_op8_oos131_a13:
    uses: ./.github/workflows/build_kernel_op8_oos13.1_a13.yml
    secrets: inherit
    if: ${{ inputs.build_kernel_op8_oos131_a13 }}
  build_kernel_k20p_aosp_a15:
    uses: ./.github/workflows/build_kernel_k20p_aosp_a15.yml
    secrets: inherit
    if: ${{ inputs.build_kernel_k20p_aosp_a15 }}
  build_kernel_mix2s_evox_a15:
    uses: ./.github/workflows/build_kernel_mix2s_evox_a15.yml
    secrets: inherit
    if: ${{ inputs.build_kernel_mix2s_evox_a15 }}

  trigger-release:
    runs-on: ubuntu-latest
    needs:
        - build_kernel_op8_oos131_a13
        - build_kernel_k20p_aosp_a15
        - build_kernel_mix2s_evox_a15
    if: ${{ inputs.make_release }}
    env:
      REPO_OWNER: JackA1ltman
      REPO_NAME: NonGKI_Kernel_Build
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RELEASE_NAME: "Build Kernels With KernelSU Next & SUSFS"
      RELEASE_NOTES: |
        Automatic build.
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Get the Latest Tag from GitHub
      - name: Generate and Create New Tag
        run: |
            # Fetch the latest tag from GitHub (this is the latest tag based on the GitHub API)
            LATEST_TAG=$(gh api repos/$REPO_OWNER/$REPO_NAME/tags --jq '.[0].name')
            if [ -z "$LATEST_TAG" ]; then
              LATEST_TAG="v1.5.3-0"  # Default to v1.5.3-0 if no tag exists
            fi

            # Increment the suffix (e.g., v1.5.3-0 becomes v1.5.3-1)
            NEW_TAG=$(echo "$LATEST_TAG" | awk -F- '{suffix=$2; if (!suffix) suffix=0; suffix++; printf "%s-%d", $1, suffix}')

            # Output the new tag to be used
            echo "New tag: $NEW_TAG"

            # Set the new tag as an environment variable to be used in later steps
            echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

            # Create the tag in the repository
            git tag $NEW_TAG
            git push origin $NEW_TAG
          path: ./downloaded-artifacts

      # Create GitHub Release and upload files if make_release is true
