--- a/drivers/android/binder.c	2025-03-04 18:37:36.870957053 +0800
+++ b/drivers/android/binder.c	2025-03-04 18:40:31.492917622 +0800
@@ -72,6 +72,7 @@
 #include <linux/security.h>
 #include <linux/spinlock.h>
 #include <linux/ratelimit.h>
+#include <linux/rekernel.h>
 
 #include <uapi/linux/android/binder.h>
 #include <uapi/linux/android/binderfs.h>
@@ -3761,6 +3762,18 @@
 		target_proc = target_thread->proc;
 		target_proc->tmp_ref++;
 		binder_inner_proc_unlock(target_thread->proc);
+   		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val <= MAX_SYSTEM_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=reply,oneway=0,from_pid=%d,from=%d,target_pid=%d,target=%d;", proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+   		}
 	} else {
 		if (tr->target.handle) {
 			struct binder_ref *ref;
@@ -3833,6 +3846,18 @@
 #endif
 
 		e->to_node = target_node->debug_id;
+   		if (start_rekernel_server() == 0) {
+			if (target_proc
+				&& (NULL != target_proc->tsk)
+				&& (NULL != proc->tsk)
+				&& (task_uid(target_proc->tsk).val > MIN_USERAPP_UID)
+				&& (proc->pid != target_proc->pid)
+				&& line_is_frozen(target_proc->tsk)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=transaction,oneway=%d,from_pid=%d,from=%d,target_pid=%d,target=%d;", tr->flags & TF_ONE_WAY, proc->pid, task_uid(proc->tsk).val, target_proc->pid, task_uid(target_proc->tsk).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+   		}
 		if (security_binder_transaction(proc->cred,
 						target_proc->cred) < 0) {
 			return_error = BR_FAILED_REPLY;

--- a/drivers/android/binder_alloc.c	2025-03-04 18:37:47.964435558 +0800
+++ b/drivers/android/binder_alloc.c	2025-03-04 18:45:00.252664177 +0800
@@ -23,6 +23,7 @@
 #include <linux/uaccess.h>
 #include <linux/highmem.h>
 #include <linux/sizes.h>
+#include <linux/rekernel.h>
 #include "binder_alloc.h"
 #include "binder_trace.h"
 
@@ -459,6 +460,7 @@
 				size_t size,
 				int is_async)
 {
+	struct task_struct *proc_task = NULL;
 	struct rb_node *n = alloc->free_buffers.rb_node;
 	struct rb_node *best_fit = NULL;
 	struct binder_buffer *buffer;
@@ -466,6 +468,20 @@
 	unsigned long curr_last_page;
 	size_t buffer_size;
 
+	if (is_async
+		&& (alloc->free_async_space < 3 * (size + sizeof(struct binder_buffer))
+		|| (alloc->free_async_space < WARN_AHEAD_SPACE))) {
+		rcu_read_lock();
+		proc_task = find_task_by_vpid(alloc->pid);
+		rcu_read_unlock();
+		if (proc_task != NULL && start_rekernel_server() == 0) {
+			if (line_is_frozen(proc_task)) {
+     				char binder_kmsg[PACKET_SIZE];
+                       	snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Binder,bindertype=free_buffer_full,oneway=1,from_pid=%d,from=%d,target_pid=%d,target=%d;", current->pid, task_uid(current).val, proc_task->pid, task_uid(proc_task).val);
+         			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+			}
+		}
+	}
 
 	if (is_async && alloc->free_async_space < size) {
 		binder_alloc_debug(BINDER_DEBUG_BUFFER_ALLOC,

--- a/kernel/signal.c	2025-03-04 18:37:59.636833119 +0800
+++ b/kernel/signal.c	2025-03-04 18:47:02.835819715 +0800
@@ -46,6 +46,7 @@
 #include <linux/oom.h>
 #include <linux/capability.h>
 #include <linux/cgroup.h>
+#include <linux/rekernel.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/signal.h>
@@ -1310,6 +1311,13 @@
 {
 	unsigned long flags;
 	int ret = -ESRCH;
+	if (start_rekernel_server() == 0) {
+ 		if (line_is_frozen(current) && (sig == SIGKILL || sig == SIGTERM || sig == SIGABRT || sig == SIGQUIT)) {
+     			char binder_kmsg[PACKET_SIZE];
+			snprintf(binder_kmsg, sizeof(binder_kmsg), "type=Signal,signal=%d,killer_pid=%d,killer=%d,dst_pid=%d,dst=%d;", sig, task_tgid_nr(p), task_uid(p).val, task_tgid_nr(current), task_uid(current).val);
+     			send_netlink_message(binder_kmsg, strlen(binder_kmsg));
+ 		}
+ 	}
 
 #ifdef OPLUS_FEATURE_HANS_FREEZE
 	if (is_frozen_tg(p)  /*signal receiver thread group is frozen?*/
